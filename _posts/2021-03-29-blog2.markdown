---
layout : "post"
title : "Image Classification using Convolutional Neural Networks"
author : "Erandi Ranthilake"
hasGit : true
gitProject : "https://github.com/erandiranthilake/CIFAR10_Image_classification"
hasLink : true
link : "https://erandiranthilake.github.io/"
linkTitle: "Home Page Link: https://erandiranthilake.github.io/"

---
<h2>Contribution :</h2>
<h3>Technical Documentation for Image Classification and Convolutional Neural Network<br>
Suggestions to improve the average score by changing various parameters of the base CNN model </h3>
<hr>

<a href="https://github.com/erandiranthilake/CIFAR10_Image_classification">Link to Image classifier Notebook</a><br>
<hr>

<div style="text-align: justify"> 
<h2>Image Classification</h2>
Image classification refers to the task of categorizing images into N number of predefined classes. Though it seems like an effortless task for an human eye, for an automated system, this is a complicated task that presented with many challenges. As there are number of use cases for developing such a system, computer scientists continue to research in areas to improve image classification. One of such effort is using Deep learning techniques to accomplish the task. It has been successful to use Convolutional Neural Networks to classify images and also accomplish task beyond, such as object detection, object segmentation and instance segmentation.<br><br>

<h2>Convolutional Neural Network</h2>
A convolutional neural network (CNN) is composed of a backbone structure and heads. The central structure function as the main feature extractor which consist of multiple Convolutional layers, filters and pooling layers. The heads in the model composed of the classifiers, predictors, optimizers, and other techniques that used to fine-tune the overall performance of the model.
In image classification Convolutional Neural Networks are preferred over other techniques as they exhibit superior feature extraction capabilities at a lower computational cost.<br>
<img src="https://raw.githubusercontent.com/erandiranthilake/erandiranthilake.github.io/gh-pages/images/CNN_model.JPG" alt="CNN Model"><br>
<i>Source: ML Practicum: Image Classification</i>
<br><br>
<b>Input Layer:</b> Some networks consis of an input layer which load teh images and uses a resulting output to load to convolutional layer. Various operations can take place in this layer as preparations for the next layers, such as, mean-substraction and feature-scaling.
<br>
<b>Convolutional layer:</b>This is the main feature extraction or learning layer in the network. Convolutional layer convolves the input with a set of filters which produces a feature map in the output.
<br>
<b>Pooling layer:</b>This layer is responsible for reducing the spatial dimension of teh input. There is a Pooling layer after each convolutional layer.
<br>
<b>Fully connected layer:</b>This layer consider the input as a single vector and produce a single vector as the output. With in the same layer an activation function such as 'softmax activation' can be used to categorize teh final output.
<br><br>

<h2>What is the best model for image classification?</h2>
Image classification, object detection and other important areas of computer vision have numerous applications in different fields such as security, medical, surveillance, etc. Although Convolutional neural networks have been identified as one of the best methodologies to develop model for image classification, there are number of parameters that can be responsible for the efficiency and accuracy of the model. On going research have identified that deep networks can improve accuracy of the models, where as shallow networks are more efficient. Nevertheless, possibility of improving CNN models by fine tuning different parameters is an area, researched extensively.
<br><br>
The effort of this article is to identify some of such parameters that can affect the accuracy of models and improve an existing base model using those parameters.
<br><br>

<h3>Image Classification using CIFAR 10 and CNN model : <b>Base Model</b></h3>
A base CNN model is developed using 'Keras' Python library.<br>
Base model consists of three convolutional layers with 4, 8, 16 neurons in each layer. A filter size of 7 * 7 is used with padding 'same'.
<br><br>
<img src="https://raw.githubusercontent.com/erandiranthilake/erandiranthilake.github.io/gh-pages/images/model_code.JPG" alt="CNN Model codebase"><br>
<i>CNN model (Source: Tensorflow Tutorial)</i>
<br><br>
<img src="https://raw.githubusercontent.com/erandiranthilake/erandiranthilake.github.io/gh-pages/images/model_summary.JPG" alt="CNN Model summary"><br>
<i>Model Summary</i>
<br><br>
Model is trained using 'Adam' Optimizer and 'sparse_categorical_crossentropy' as the loss function.
<br><br>
<img src="https://raw.githubusercontent.com/erandiranthilake/erandiranthilake.github.io/gh-pages/images/model_train.JPG" alt="CNN Model codebase"><br>
<i>Training model</i>
<br><br>

<h3>Comparison of Models based on Neuron Count</h3>
Following different models are developed to compare the base accuracies against different neuron counts.
<br><br>
<img src="https://raw.githubusercontent.com/erandiranthilake/erandiranthilake.github.io/gh-pages/images/neuron_count_box.JPG" alt="neuron_count_table"><br>
<i>Models and neuron counts in each layer</i>
<br><br>
<img src="https://raw.githubusercontent.com/erandiranthilake/erandiranthilake.github.io/gh-pages/images/neuron_count_chart.JPG" alt="neuron_count_chart"><br>
<i>Average Accuracy of each model</i>
<br><br>
Based on the above findings we can conclude that performance of the model improves with increasing number of neurons in each layer.
<br><br>

<h3>Comparison of Models based on Filter size</h3>
Following different models are developed to compare the base accuracies against different filter sizes.
<br><br>
<img src="https://raw.githubusercontent.com/erandiranthilake/erandiranthilake.github.io/gh-pages/images/filter_size_table.JPG" alt="filter_size_table"><br>
<i>Models and neuron counts in each layer</i>
<br><br>
<img src="https://raw.githubusercontent.com/erandiranthilake/erandiranthilake.github.io/gh-pages/images/filter_size_chart.JPG" alt="filter_size_chart"><br>
<i>Average Accuracy of each model</i>
<br><br>
Based on the above findings we can conclude that performance of the model improves with decreasing filter sizes.
<br><br>

<h2>Challenges</h2>
Main challenge faced during the process was limitation of machine power to process increased number of layers and larger data sets. As a measure to overcome these issues, at times the models were run through limited data sets. Possible improvement concerning machine power is using GPU.
<br><br>

<br><br>

</div>
